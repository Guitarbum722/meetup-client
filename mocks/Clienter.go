// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/Guitarbum722/meetup-client/models"
import url "net/url"

// Clienter is an autogenerated mock type for the Clienter type
type Clienter struct {
	mock.Mock
}

// Categories provides a mock function with given fields:
func (_m *Clienter) Categories() (*models.Categories, error) {
	ret := _m.Called()

	var r0 *models.Categories
	if rf, ok := ret.Get(0).(func() *models.Categories); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Categories)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentOnEvent provides a mock function with given fields: _a0, _a1
func (_m *Clienter) CommentOnEvent(_a0 func(map[string][]string, url.Values), _a1 map[string][]string) (*models.Comment, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *models.Comment
	if rf, ok := ret.Get(0).(func(func(map[string][]string, url.Values), map[string][]string) *models.Comment); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(func(map[string][]string, url.Values), map[string][]string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEvent provides a mock function with given fields: _a0, _a1
func (_m *Clienter) CreateEvent(_a0 func(map[string][]string, url.Values), _a1 map[string][]string) (*models.Event, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *models.Event
	if rf, ok := ret.Get(0).(func(func(map[string][]string, url.Values), map[string][]string) *models.Event); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(func(map[string][]string, url.Values), map[string][]string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEvent provides a mock function with given fields: _a0
func (_m *Clienter) DeleteEvent(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EventByID provides a mock function with given fields: _a0, _a1
func (_m *Clienter) EventByID(_a0 string, _a1 string) (*models.Event, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *models.Event
	if rf, ok := ret.Get(0).(func(string, string) *models.Event); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EventCommentByID provides a mock function with given fields: _a0
func (_m *Clienter) EventCommentByID(_a0 int) (*models.Comment, error) {
	ret := _m.Called(_a0)

	var r0 *models.Comment
	if rf, ok := ret.Get(0).(func(int) *models.Comment); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EventComments provides a mock function with given fields: _a0, _a1
func (_m *Clienter) EventComments(_a0 func(map[string][]string, url.Values), _a1 map[string][]string) (*models.Comments, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *models.Comments
	if rf, ok := ret.Get(0).(func(func(map[string][]string, url.Values), map[string][]string) *models.Comments); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Comments)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(func(map[string][]string, url.Values), map[string][]string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EventRatings provides a mock function with given fields: _a0, _a1
func (_m *Clienter) EventRatings(_a0 func(map[string][]string, url.Values), _a1 map[string][]string) (*models.Ratings, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *models.Ratings
	if rf, ok := ret.Get(0).(func(func(map[string][]string, url.Values), map[string][]string) *models.Ratings); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Ratings)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(func(map[string][]string, url.Values), map[string][]string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EventsByGeo provides a mock function with given fields: _a0, _a1, _a2
func (_m *Clienter) EventsByGeo(_a0 string, _a1 string, _a2 string) (*models.Events, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *models.Events
	if rf, ok := ret.Get(0).(func(string, string, string) *models.Events); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Events)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EventsByGroup provides a mock function with given fields: _a0, _a1, _a2
func (_m *Clienter) EventsByGroup(_a0 string, _a1 []string, _a2 bool) (*models.Events, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *models.Events
	if rf, ok := ret.Get(0).(func(string, []string, bool) *models.Events); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Events)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string, bool) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EventsByGroupID provides a mock function with given fields: _a0, _a1, _a2
func (_m *Clienter) EventsByGroupID(_a0 int, _a1 []string, _a2 bool) (*models.Events, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *models.Events
	if rf, ok := ret.Get(0).(func(int, []string, bool) *models.Events); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Events)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, []string, bool) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupByID provides a mock function with given fields: _a0
func (_m *Clienter) GroupByID(_a0 []int) (*models.Groups, error) {
	ret := _m.Called(_a0)

	var r0 *models.Groups
	if rf, ok := ret.Get(0).(func([]int) *models.Groups); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Groups)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupByOrganizer provides a mock function with given fields: _a0
func (_m *Clienter) GroupByOrganizer(_a0 []int) (*models.Groups, error) {
	ret := _m.Called(_a0)

	var r0 *models.Groups
	if rf, ok := ret.Get(0).(func([]int) *models.Groups); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Groups)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupByURLName provides a mock function with given fields: _a0
func (_m *Clienter) GroupByURLName(_a0 []string) (*models.Groups, error) {
	ret := _m.Called(_a0)

	var r0 *models.Groups
	if rf, ok := ret.Get(0).(func([]string) *models.Groups); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Groups)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupByZip provides a mock function with given fields: _a0
func (_m *Clienter) GroupByZip(_a0 int) (*models.Groups, error) {
	ret := _m.Called(_a0)

	var r0 *models.Groups
	if rf, ok := ret.Get(0).(func(int) *models.Groups); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Groups)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LikeComment provides a mock function with given fields: _a0
func (_m *Clienter) LikeComment(_a0 int) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Member provides a mock function with given fields: _a0
func (_m *Clienter) Member(_a0 int) (*models.Member, error) {
	ret := _m.Called(_a0)

	var r0 *models.Member
	if rf, ok := ret.Get(0).(func(int) *models.Member); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Member)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Members provides a mock function with given fields: _a0
func (_m *Clienter) Members(_a0 int) (*models.Members, error) {
	ret := _m.Called(_a0)

	var r0 *models.Members
	if rf, ok := ret.Get(0).(func(int) *models.Members); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Members)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RateEvent provides a mock function with given fields: _a0, _a1
func (_m *Clienter) RateEvent(_a0 func(map[string][]string, url.Values), _a1 map[string][]string) (*models.Rating, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *models.Rating
	if rf, ok := ret.Get(0).(func(func(map[string][]string, url.Values), map[string][]string) *models.Rating); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Rating)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(func(map[string][]string, url.Values), map[string][]string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveEventComment provides a mock function with given fields: _a0
func (_m *Clienter) RemoveEventComment(_a0 int) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnlikeComment provides a mock function with given fields: _a0
func (_m *Clienter) UnlikeComment(_a0 int) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateEvent provides a mock function with given fields: _a0, _a1, _a2
func (_m *Clienter) UpdateEvent(_a0 string, _a1 func(map[string][]string, url.Values), _a2 map[string][]string) (*models.Event, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *models.Event
	if rf, ok := ret.Get(0).(func(string, func(map[string][]string, url.Values), map[string][]string) *models.Event); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, func(map[string][]string, url.Values), map[string][]string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
